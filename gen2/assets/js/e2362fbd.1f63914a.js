"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[9539],{28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>d});var i=r(96540);const t={},o=i.createContext(t);function s(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(o.Provider,{value:n},e.children)}},46466:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"client-sdk/python-sdk/recording-example","title":"Example - Record and download VRS","description":"Using aria.sdk_gen2 to Record and Download Data from an Aria Device","source":"@site/docs-ark/client-sdk/python-sdk/recording-example.mdx","sourceDirName":"client-sdk/python-sdk","slug":"/client-sdk/python-sdk/recording-example","permalink":"/projectaria_tools/gen2/ark/client-sdk/python-sdk/recording-example","draft":false,"unlisted":false,"editUrl":"https://www.internalfb.com/code/fbsource/arvr/projects/ariane/aria_research_kit/projectaria_tools/website/docs-ark/client-sdk/python-sdk/recording-example.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Example - Record and download VRS"},"sidebar":"arkSidebar","previous":{"title":"Example - Connection","permalink":"/projectaria_tools/gen2/ark/client-sdk/python-sdk/connection-example"},"next":{"title":"Example - Streaming","permalink":"/projectaria_tools/gen2/ark/client-sdk/python-sdk/streaming-example"}}');var t=r(74848),o=r(28453);const s={sidebar_position:3,title:"Example - Record and download VRS"},d=void 0,c={},a=[{value:"Run recording example",id:"run-recording-example",level:2},{value:"Step-by-step walk through",id:"step-by-step-walk-through",level:2}];function l(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Using aria.sdk_gen2 to Record and Download Data from an Aria Device"}),"\n",(0,t.jsx)(n.h2,{id:"run-recording-example",children:"Run recording example"}),"\n",(0,t.jsx)(n.p,{children:"Usage Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"python ~/Downloads/projectaria_client_sdk_samples_gen2/device_record.py\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-by-step-walk-through",children:"Step-by-step walk through"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Import Required Modules"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Start by importing the necessary modules:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import argparse\nimport time\nimport aria.sdk_gen2 as sdk_gen2\n"})}),"\n",(0,t.jsx)(n.p,{children:"aria.sdk_gen2 is the SDK for interacting with Aria devices."}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Parse Command-Line Arguments"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Set up argument parsing to allow the user to specify the recording duration and output directory:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def parse_args() -> argparse.Namespace:\n   parser = argparse.ArgumentParser()\n   parser.add_argument(\n       "--output",\n       dest="output_path",\n       type=str,\n       default="",\n       required=False,\n       help="Output directory to save the recording",\n   )\n   parser.add_argument(\n       "--duration",\n       dest="duration",\n       type=int,\n       default=10,\n       required=False,\n       help="Recording duration in seconds (default: 10)",\n   )\n   return parser.parse_args()\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"--output specifies where the recording will be saved."}),"\n",(0,t.jsx)(n.li,{children:"--duration sets how long the recording will last (in seconds)."}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Set Up the Device Client and Configuration"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Create and configure the device client:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"device_client = sdk_gen2.DeviceClient()\nconfig = sdk_gen2.DeviceClientConfig()\ndevice_client.set_client_config(config)\n"})}),"\n",(0,t.jsx)(n.p,{children:"DeviceClient manages the authentication and device connection.\nDeviceClientConfig is used to specify the target device by serial number or IP address."}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsx)(n.li,{children:"Connect to the Device"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Attempt to connect to the device:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'device = device_client.connect()\nprint(f"Successfully connected to device {device.connection_id()}")\n'})}),"\n",(0,t.jsx)(n.p,{children:"If successful, you\u2019ll see a confirmation message."}),"\n",(0,t.jsxs)(n.ol,{start:"5",children:["\n",(0,t.jsx)(n.li,{children:"Set Up Recording Configuration"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Configure the recording profile and type:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'recording_config = sdk_gen2.RecordingConfig()\nrecording_config.profile_name = "profile9"\nrecording_config.recording_type = sdk_gen2.RecordingType.RECORDING_TYPE_PROTOTYPE\nrecording_config.recording_name = "example_recording"\ndevice.set_recording_config(recording_config)\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"recording_name: User specified name of the recording."}),"\n",(0,t.jsx)(n.li,{children:"profile_name: Profile9 is the official supported profile to recording and streaming."}),"\n",(0,t.jsx)(n.li,{children:"RECORDING_TYPE_PROTOTYPE: This is the recording type that allows direct download from device to local PC for fast prototyping. For more details on RECORDING_TYPE, please refer to technical specs page."}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"6",children:["\n",(0,t.jsx)(n.li,{children:"Start and Stop Recording"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Begin recording, wait for the specified duration, then stop:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'uuid = device.start_recording()\nprint(f"Start recording for {duration} seconds with uuid: {uuid}")\ntime.sleep(duration)\ndevice.stop_recording()\n'})}),"\n",(0,t.jsx)(n.p,{children:"The recording runs for the duration specified by the user. The uuid is needed to download the specific recording."}),"\n",(0,t.jsxs)(n.ol,{start:"7",children:["\n",(0,t.jsx)(n.li,{children:"List and Download Recordings"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"List all recordings and download the one just created using the uuid:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"device.list_recordings()\ndevice.download_recording(uuid=uuid, output_path=output_path)\n"})}),"\n",(0,t.jsx)(n.p,{children:"This will save the recording to the specified output directory."})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);
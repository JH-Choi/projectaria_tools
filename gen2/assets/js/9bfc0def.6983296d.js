"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[6946],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(96540);const s={},c=i.createContext(s);function r(e){const n=i.useContext(c);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(c.Provider,{value:n},e.children)}},69206:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"client-sdk/python-sdk/connection-example","title":"Example - Connection","description":"Using aria.sdk_gen2 to connect to an Aria Device.","source":"@site/docs-ark/client-sdk/python-sdk/connection-example.mdx","sourceDirName":"client-sdk/python-sdk","slug":"/client-sdk/python-sdk/connection-example","permalink":"/projectaria_tools/gen2/ark/client-sdk/python-sdk/connection-example","draft":false,"unlisted":false,"editUrl":"https://www.internalfb.com/code/fbsource/arvr/projects/ariane/aria_research_kit/projectaria_tools/website/docs-ark/client-sdk/python-sdk/connection-example.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Example - Connection"},"sidebar":"arkSidebar","previous":{"title":"Example - Authentication","permalink":"/projectaria_tools/gen2/ark/client-sdk/python-sdk/auth-example"},"next":{"title":"Example - Record and download VRS","permalink":"/projectaria_tools/gen2/ark/client-sdk/python-sdk/recording-example"}}');var s=t(74848),c=t(28453);const r={sidebar_position:2,title:"Example - Connection"},o=void 0,a={},l=[{value:"Run connection example",id:"run-connection-example",level:2},{value:"Step-by-step walk through",id:"step-by-step-walk-through",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Using aria.sdk_gen2 to connect to an Aria Device."}),"\n",(0,s.jsx)(n.h2,{id:"run-connection-example",children:"Run connection example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python ~/Downloads/projectaria_client_sdk_samples_gen2/device_connect.py --serial IM0XXXXXXXXXXX\n"})}),"\n",(0,s.jsx)(n.p,{children:"Replace IM0XXXXXXXXXXX with your device\u2019s actual serial number."}),"\n",(0,s.jsx)(n.h2,{id:"step-by-step-walk-through",children:"Step-by-step walk through"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Import Required Modules"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Start by importing the necessary modules:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import argparse\nimport aria.sdk_gen2 as sdk_gen2\n"})}),"\n",(0,s.jsx)(n.p,{children:"aria.sdk_gen2 is the SDK for interacting with Aria devices."}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Parse Command-Line Arguments"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Set up argument parsing to allow the user to specify the device serial number:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def parse_args() -> argparse.Namespace:\n   parser = argparse.ArgumentParser()\n   parser.add_argument(\n       "--serial",\n       dest="serial",\n       type=str,\n       default="",\n       required=False,\n       help="Serial number of the device which will be connected. (e.g. 1M0YDB5H7B0020)",\n   )\n   return parser.parse_args()\n'})}),"\n",(0,s.jsx)(n.p,{children:"The --serial argument lets the user specify which device to connect to.\nIf not provided, it defaults to an empty string, and the first available device will be used."}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Set Up the Device Client and Configuration"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Create and configure the device client:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def device_connect(serial):\n   device_client = sdk_gen2.DeviceClient()\n   config = sdk_gen2.DeviceClientConfig()\n   config.device_serial = serial\n   device_client.set_client_config(config)\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"DeviceClient manages the authentication and device connection."}),"\n",(0,s.jsx)(n.li,{children:"DeviceClientConfig is used to specify the target device by serial number or IP address."}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"Connect to the Device"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Attempt to connect to the specified device:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'   try:\n       device = device_client.connect()\n       print(f"Successfully connected to device {device.connection_id()}")\n   except Exception:\n       print("Failed to connect to device.")\n'})}),"\n",(0,s.jsx)(n.p,{children:"If the connection is successful, a confirmation message is printed."})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);